version: '3.8'

services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "${API_PORT:-8000}:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./back:/app
    environment:
      - PYTHONUNBUFFERED=1
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - API_PREFIX=${API_PREFIX}
    env_file:
      - .env
    restart: unless-stopped

  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "80:${FRONTEND_PORT:-3000}"
    depends_on:
      - backend
    env_file:
      - .env

  db:
    image: ankane/pgvector:latest
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - ./db/pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - .env

volumes:
  pg_data:
