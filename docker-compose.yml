services:
  backend:
    build:
      context: ./back
      dockerfile: Dockerfile
    ports:
      - "${API_HOST_PORT:-8000}:${API_PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./back:/app
      - ./ml/models/huggingface:/root/.cache/huggingface
    environment:
      - PYTHONUNBUFFERED=1
      - HF_HOME=/models
    restart: unless-stopped
    env_file:
      - path: ./.env.example
        required: True
      - path: ./.env
        required: false
  ml:
    build:
      context: ./ml
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./ml:/app
      - ./ml/models/huggingface:/root/.cache/huggingface
    environment:
      - PYTHONUNBUFFERED=1
      - HF_HOME=/models
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      backend:
        condition: service_started
    env_file:
      - path: ./.env
        required: True
      - path: ./.env.example
        required: false
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_HOST_PORT:-3000}:${FRONTEND_PORT:-3000}"
    depends_on:
      - backend
    env_file:
      - path: ./.env.example
        required: True
      - path: ./.env
        required: false
  db:
    image: ankane/pgvector:latest
    environment:
      POSTGRES_USER: ${DB_USER:-user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_DB: ${DB_NAME:-db}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - ./db/pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-user} -d ${DB_NAME:-db}"]
      interval: 5s
      timeout: 5s
      retries: 10
    env_file:
      - path: ./.env.example
        required: True
      - path: ./.env
        required: false

volumes:
  pg_data:
